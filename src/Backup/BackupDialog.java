/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Backup;

import Utilitarios.Dir;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import splashscreen.SplashFrame;

/**
 *
 * @author Heleno
 */
public class BackupDialog extends javax.swing.JDialog {

    /**
     * Creates new form BackupDialog
     */
    private final java.awt.Frame parent;
    private Integer opPreEscolhida = null;

    @SuppressWarnings("OverridableMethodCallInConstructor")
    public BackupDialog(java.awt.Frame parent, boolean modal, Integer opPreEscolhida) {
        super(parent, modal);
        this.parent = parent;
        this.opPreEscolhida = opPreEscolhida;

        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(Utilitarios.Dir.imagens_internas + "icone.png"));
        if (jChB_destinoPadrao.isSelected()) {
            File caminhoPadrao = new File(Dir.KEY_PASTA_BACKUP);
            jL_caminhoPadrao.setText(caminhoPadrao.getAbsolutePath() + "\\");
        } else {
            jL_caminhoPadrao.setText("");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jChB_destinoPadrao = new javax.swing.JCheckBox();
        jL_caminhoPadrao = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ATENÇÃO", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jTextArea1.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("O Backup é uma rotina de segurança.\nO tempo de realização depende do volume de dados.\n\nPara maior eficiência salve o arquivo \nem local seguro de preferência em \nmídia removível.\n\nRealize essa rotina diariamente,\nem caso de dúvidas contacte o \nsuporte técnico:\n\nTELEFONE e FAX: (081) 3725-4926");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GTECH-GESTAO");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/accept.png"))); // NOI18N
        jButton1.setText("Fazer Backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cross.png"))); // NOI18N
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jChB_destinoPadrao.setSelected(true);
        jChB_destinoPadrao.setText("Destino padrão");
        jChB_destinoPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChB_destinoPadraoActionPerformed(evt);
            }
        });

        jL_caminhoPadrao.setBackground(new java.awt.Color(255, 255, 255));
        jL_caminhoPadrao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jL_caminhoPadrao.setForeground(new java.awt.Color(0, 0, 255));
        jL_caminhoPadrao.setText(" ");
        jL_caminhoPadrao.setToolTipText("Dois cliques para alterar o destino PADRÃO.");
        jL_caminhoPadrao.setOpaque(true);
        jL_caminhoPadrao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_caminhoPadraoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jL_caminhoPadrao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(jChB_destinoPadrao)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jChB_destinoPadrao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jL_caminhoPadrao)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(450, 486));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jChB_destinoPadrao.isSelected()) {
            fazerBackupCaminhoPadrao();
        } else {
            fazerBackupEscolheCaminho();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jChB_destinoPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_destinoPadraoActionPerformed
        if (jChB_destinoPadrao.isSelected()) {
            File caminhoPadrao = new File(Dir.KEY_PASTA_BACKUP);
            jL_caminhoPadrao.setText(caminhoPadrao.getAbsolutePath() + "\\");
        } else {
            jL_caminhoPadrao.setText("");
        }
    }//GEN-LAST:event_jChB_destinoPadraoActionPerformed

    private void jL_caminhoPadraoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_caminhoPadraoMouseClicked
        if (evt.getClickCount() > 1) {
            //alterar o destino padrao

            try {
                JFileChooser buscar_destino = new JFileChooser(new File(Utilitarios.Dir.KEY_PASTA_BACKUP));
                buscar_destino.setDialogTitle("ALTERANDO O DESTINO PADRÃO DOS BACKUPS");
                buscar_destino.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                buscar_destino.setDialogType(JFileChooser.OPEN_DIALOG);
                buscar_destino.setApproveButtonText("Definir");
                int result = buscar_destino.showOpenDialog(this);

                if (buscar_destino.getSelectedFile() != null && result != JFileChooser.CANCEL_OPTION) {
                    String destino = buscar_destino.getSelectedFile().toString() + "\\";
                    if (new File(destino).canExecute()) {
                        Dir.setKEY_PASTA_BACKUP(destino);
                        jL_caminhoPadrao.setText(Dir.KEY_PASTA_BACKUP);
                    } else {
                        jL_caminhoPadrao.setText(Dir.KEY_PASTA_BACKUP);
                        JOptionPane.showMessageDialog(null, "CAMINHO INVÁLIDO! ", "SISTEMA", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    jL_caminhoPadrao.setText(Dir.KEY_PASTA_BACKUP);
                    JOptionPane.showMessageDialog(null, "Ok, Processo cancelado.", "SISTEMA", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (HeadlessException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Ops! Não foi possivel fazer isto!\n" + e.getMessage(), "ALERTA DO SISTEMA", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jL_caminhoPadraoMouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton1ActionPerformed(null);
        }
    }//GEN-LAST:event_jButton1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BackupDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BackupDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BackupDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BackupDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                BackupDialog dialog = new BackupDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jChB_destinoPadrao;
    private javax.swing.JLabel jL_caminhoPadrao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void fazerBackupEscolheCaminho() {
        try {
            JFileChooser buscar_destino = new JFileChooser(new File(Utilitarios.Dir.dados));
            buscar_destino.setDialogTitle("DESTINO DO BACKUP");
            buscar_destino.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            buscar_destino.setDialogType(JFileChooser.OPEN_DIALOG);
            buscar_destino.setApproveButtonText("Salvar neste caminho");
            int result = buscar_destino.showOpenDialog(this);

            if (buscar_destino.getSelectedFile() != null && result != JFileChooser.CANCEL_OPTION) {
                String destino = buscar_destino.getSelectedFile().toString() + "\\";
                if (new File(destino).canExecute()) {
                    executarBKP(destino, null);
                } else {
                    JOptionPane.showMessageDialog(null, "CAMINHO INVÁLIDO! ", "SISTEMA", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ok, Processo cancelado.", "SISTEMA", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (HeadlessException e) {
            Logger.getLogger(BackupDialog.class.getName()).log(Level.SEVERE, "", e);
            JOptionPane.showMessageDialog(null, "Ops! Não foi possivel fazer isto!\n" + e.getMessage(), "ALERTA DO SISTEMA", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fazerBackupCaminhoPadrao() {
        String destino = jL_caminhoPadrao.getText().replace("/", "\\");
        if (new File(destino).canExecute()) {
            executarBKP(destino, opPreEscolhida);
        } else {
            JOptionPane.showMessageDialog(null, "CAMINHO INVÁLIDO! ", "SISTEMA", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void executarBKP(String destino, Integer opEscolhida) {
        try {
            Object[] op = {"Abrir pasta.", "Fechar o programa.", "Desligar o computador."};
            if (opPreEscolhida == null) {
                opEscolhida = JOptionPane.showOptionDialog(this, "Ação após o BACKUP:", "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, op, op[1]);
            }
            SplashFrame sf = new SplashFrame(parent, destino);
            if (opEscolhida == 0) {
                if (sf.startBackup()) {
                    JOptionPane.showMessageDialog(this, "Arquivo \"" + sf.nomeArquivo + "\" criado com SUCESSO.\n"
                            + sf.caminho_do_arquivo, "BACKUP", JOptionPane.INFORMATION_MESSAGE);
                    String osName = System.getProperty("os.name");
                    if (osName.startsWith("Win")) {
                        String comandoWIN = "explorer " + sf.caminho_do_arquivo;
                        System.out.println(comandoWIN);
                        Process exec = Runtime.getRuntime().exec(comandoWIN);
                        if (exec.waitFor() == 0) {

                        } else {

                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aviso! BACKUP Não realizado!", "BACKUP", JOptionPane.CLOSED_OPTION);
                }
            } else if (opEscolhida == 1) {
                if (sf.startBackup()) {
                    JOptionPane.showMessageDialog(this, "Arquivo \"" + sf.nomeArquivo + "\" criado com SUCESSO.\n"
                            + sf.caminho_do_arquivo, "BACKUP", JOptionPane.INFORMATION_MESSAGE);
                    System.exit(0);
                } else {
                    JOptionPane.showMessageDialog(this, "Aviso! BACKUP Não realizado!", "BACKUP", JOptionPane.CLOSED_OPTION);
                }
            } else if (opEscolhida == 2) {
                if (sf.startBackup()) {
                    String osName = System.getProperty("os.name");
                    if (osName.startsWith("Win")) {
                        String comandoWIN = "shutdown -s -t 10";
                        System.out.println(comandoWIN);
                        Process exec = Runtime.getRuntime().exec(comandoWIN);
                        if (exec.waitFor() == 0) {
                            if (JOptionPane.showConfirmDialog(null, "O computador vai ser desligado!", "Aviso do Sistema", JOptionPane.CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE) == 2) {
                                comandoWIN = "shutdown -a";
                                System.out.println(comandoWIN);
                                exec = Runtime.getRuntime().exec(comandoWIN);
                                if (exec.waitFor() == 0) {
                                    JOptionPane.showMessageDialog(null, "Desligamento cancelado!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
                                }
                                System.exit(0);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aviso! BACKUP Não realizado!", "BACKUP", JOptionPane.CLOSED_OPTION);
                }
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        } catch (InterruptedException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        }
    }
}
